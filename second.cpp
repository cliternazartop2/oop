#include <iostream>
#include "classstary.h"
#include <conio.h>
#include <vector>
#include <string>
#include <random>
#include <cstdlib>
#include <algorithm>
#include <iomanip>
#include <windows.h>
using namespace std;

void clearScreen() {
#ifdef _WIN32
    system("cls"); // Для Windows
#else
    system("clear"); // Для Unix-подобных систем
#endif
}
void menu() {
	std::cout << "------МЕНЮ-----" << std::endl;
	std::cout << "1 - магазин" << std::endl;
	std::cout << "2 - ферма зайцев" << std::endl;
	std::cout << "3 - амбар" << std::endl;
	std::cout << "";
}

// Проверка достаточно ли денег для покупки
bool notmoney(int money, int gold, int cofecent) {
    // Проверяем, достаточно ли средств для покупки
    return money >= (gold * cofecent);
}

int game1(int& corm, int& zayaccount, int& money, int gold1, int gold2, int cofecent) {
    std::cout << "----МАГАЗИН-----" << std::endl;
    std::cout << "1 - Купить одного зайца (" << gold1 * cofecent << ")" << std::endl;
    std::cout << "2 - Купить корм для коров (5 минут) (" << gold2 * cofecent << ")" << std::endl;
    std::cout << "3 - Выйти из магазина" << std::endl;

    // Получаем выбор пользователя
    int r;
    std::cin >> r;

    switch (r) {
    case 1:
        if (notmoney(money, gold1, cofecent)) {
            std::cout << "Вы купили зайца!" << std::endl;
            zayaccount++;
            money -= (gold1 * cofecent); // Уменьшаем деньги после покупки
        }
        else {
            std::cout << "У вас недостаточно средств для покупки!" << std::endl;
        }
        break;

    case 2:
        if (notmoney(money, gold2, cofecent)) {
            std::cout << "Вы купили корм для коров!" << std::endl;
            corm = 1; // Устанавливаем значение корма
            money -= (gold2 * cofecent); // Уменьшаем деньги после покупки
        }
        else {
            std::cout << "У вас недостаточно средств для покупки!" << std::endl;
        }
        break;

    case 3:
        std::cout << "Вы вышли из магазина." << std::endl;
        return 0;
        break;

    default:
        std::cout << "Неверный выбор, попробуйте еще раз." << std::endl;
        break;
    }

}

struct Rabbit {
    string name;
    int age;
    int price;
    bool isAvailable;

    // Конструктор
    Rabbit(string name, string breed, int age, double price) :
        name(name), age(age), price(price), isAvailable(true) {}
};


// Функция для генерации случайного имени для зайца
string generateRandomName() {
    static const char alphabet[] = "rwwwwwwwwwwwwwwowwwwwwwwwwmwwwwwwwwwwwa";
    string name;
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> distrib(0, sizeof(alphabet) - 2);
    int nameLength = 4; // Длина имени от 4 до 8 символов
    for (int i = 0; i < nameLength; ++i) {
        name += alphabet[distrib(gen)];
    }
    name[0] = toupper(name[0]); // Первую букву заглавной
    return name;
}
int generateRandomAge() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> distrib(1, 24); // Возраст от 1 до 24 месяцев
    return distrib(gen);
}
void runRabbitSystem(int& rabbitCount, int rabbitPrice, int hardcore) {
    vector<Rabbit> rabbits;
    int choice;
    time_t timeto{ time(nullptr) };

    do {
        std::cout << "\n=== Система Разведения и Продажи Зайцев ===\n";
        std::cout << "Текущее количество зайцев: " << rabbitCount << "\n";
        std::cout << "Стоимость одного зайца: " << rabbitPrice << "\n";
        std::cout << "1. Показать зайцев\n";
        std::cout << "2. Продать зайца\n";
        std::cout << "3. размножать зайцев\n";
        std::cout << "0. Выход\n";
        std::cout << "Введите ваш выбор: ";
        std::cin >> choice;
        clearScreen();
        switch (choice) {


        case 1: {
            if (rabbitCount == 0) {
                std::cout << "Нет доступных зайцев.\n";
                break;
            }
            std::cout << "---------------------------------------------------------------\n";
            std::cout << setw(10) << "Имя" << setw(12) << "Возраст" << setw(10) << "Цена"
                << setw(12) << "Доступен" << "\n";
            std::cout << "---------------------------------------------------------------\n";
            for (int i = 0; i < rabbitCount; ++i) {
                string name = generateRandomName();
                int age = generateRandomAge();
                rabbits.emplace_back(name, "default", age, rabbitPrice);

                std::cout << setw(10) << name << setw(8) << age
                    << setw(10) << fixed << setprecision(2) << rabbitPrice
                    << setw(12) << "Да" << "\n";

            }
            rabbits.clear(); // Очищаем список зайцев после вывода
            std::cout << "---------------------------------------------------------------\n";
            break;
        }

        case 2: { // Продажа зайца
            if (rabbitCount == 0) {
                std::cout << "Нет зайцев для продажи.\n";
                break;
            }

            std::cout << "Доступные для продажи зайцы:\n";
            std::cout << "---------------------------------------------------------------\n";
            std::cout << setw(10) << "Имя" << setw(12) << "Порода" << setw(8) << "Возраст" << setw(10) << "Цена"
                << setw(12) << "Доступен" << "\n";
            std::cout << "---------------------------------------------------------------\n";
            for (int i = 0; i < rabbitCount; ++i) {
                string name = generateRandomName();
                int age = generateRandomAge();
                rabbits.emplace_back(name, "default", age, rabbitPrice);

                std::cout << setw(10) << name << setw(12) << "default" << setw(8) << age
                    << setw(10) << fixed << setprecision(2) << rabbitPrice
                    << setw(12) << "Да" << "\n";
            }
            std::cout << "---------------------------------------------------------------\n";
            if (rabbits.empty()) {
                std::cout << "Нет доступных зайцев для продажи\n";
                break;
            }

            string rabbitNameToSell; // Имя зайца для продажи
            std::cout << "Введите имя зайца для продажи: ";
            std::cin >> rabbitNameToSell; // Получаем имя зайца от пользователя

            bool sold = false;
            for (auto& rabbit : rabbits) { // Ищем зайца в списке
                if (rabbit.name == rabbitNameToSell && rabbit.isAvailable) { // Если заяц найден и доступен для продажи
                    std::cout << "Заяц " << rabbit.name << " успешно продан!\n";
                    sold = true;
                    rabbitCount--;
                    break;
                }
            }
            if (!sold) {
                std::cout << "Заяц не найден или не доступен.\n";
            }
            rabbits.clear();
            break;
        }
        case 0:
            std::cout << "Выход из системы.\n";
            break;
        case 3:
            std::cout << "размножение зайцев!\n";
            std::cout << "p.s. чем больше зайцев тем больше шанс на размножение!\n";
            if (rabbitCount < 2) {
                std::cout << "у вас недостаточно зайцев для разведения\n";
            }
            else {
                if (rand() % 101 - rabbitCount <= 1) {
                    std::cout << "успешное разведенеие зайцев!\n";
                    std::cout << "вам добавлен 1 заяц\n";
                    rabbitCount++;
                }
                else {
                    if (timeto - time(nullptr) < 30 * hardcore)
                    std::cout << "неудача, попробуйте через" << 30 * hardcore << "секунд\n";
                    time_t timeto{ time(nullptr) };
                }
            }
            break;
        default:
            std::cout << "Неверный выбор. Пожалуйста, попробуйте еще раз.\n";
        }
    } while (choice != 0);
}
void second(){
    std::cout << R"(---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
-------------rrrrrrrr------------------------------------------
-------------|------|------------------------------------------
-------------|------|------------------------------------------
-------------|------|------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------

---------------------------------------------------------------
---------------------------------------------------------------)" << std::endl;

}
void last() {
    std::cout << R"(---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
------------rrrr----------------------------------------------
------------|--|-----------------------------------------------
------------|--|-----------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------

---------------------------------------------------------------
---------------------------------------------------------------)" << std::endl;
}
void secondtwo() {
    std::cout << R"(---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
-------------------rrrrrrrrrrr---------------------------------
-------------------|---------|---------------------------------
-------------------|---------|---------------------------------
-------------------|---------|---------------------------------
-------------------|---------|---------------------------------
-------------------|---------|---------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------

---------------------------------------------------------------
---------------------------------------------------------------)" << std::endl;
}
void first() {
    std::cout << R"(---------------------------------------------------------------
----------------------JUMP!------------------------------------
-----------rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------
-----------|-------------------------------|-------------------)" << std::endl;
}

